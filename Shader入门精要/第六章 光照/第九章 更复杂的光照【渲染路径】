大概解决我之前想的场景有多个光源shader中的unity自带变量对应的是哪个：-》其实就是如果有n个光每个片元的片元着色器也会计算n遍的

unity主要的渲染路径类型：前向渲染路径和延迟渲染路径；但其实还有好多别的
untiy的渲染路径决定了光照是如何应用到Unity Shader中的。因此，需要为每个pass指定它使用的渲染路径，这样unity就可以把光源和处理后的光照信息都放在渲染路径的数据里。
在project setting里设置后，在每个pass中使用LightMode标签来指定该pass使用的渲染路径，这样的指定和unity底层渲染引擎沟通，它就会把光照属性都按前向渲染的流程准备好，
之后我们就可以通过unity提供的内置光照变量来访问这些属性


前向渲染路径：【先着色再深度测试O(m*n)】
原理：
每进行一次完整的前向渲染，我们需要渲染该对象的图元，并计算两个缓冲区的信息：颜色缓冲区、深度缓冲区。
先根据深度缓冲来决定一个片元是否可见，如果可见再更新颜色缓冲区中的颜色值。
Pass执行次数 = N个物体 * M个光源
Unity中的前向渲染：
前向渲染有3种处理光照的方式：逐顶点处理、逐像素处理、球谐函数
Unity使用的判断规则：场景中最亮的平行光总是按逐像素处理；渲染模式被设置成Not Important的光源，会按逐顶点或球谐（SH）处理；
渲染模式被设置成Important的光源(在对应的光里设置的)如果以上规则得到的逐像素光源数量小于Quality设置中的逐像素光源数量（Pixel Light Count），会有更多的光源以逐像素的方式进行渲染。


延迟渲染路径：【先深度测试再着色O(m+n)】
除了前向渲染中使用的颜色缓冲和深度缓冲外，延迟渲染还使用了额外的缓冲区——G缓冲（Geometry Buffer，G-buffer）。G缓冲区存储了我们关心的表面（通常指离相机最近的表面）的其他信息，如：表面的法线、位置、用于光照计算的材质属性等。
原理：
延迟渲染主要包含2个Pass。第一个Pass不进行任何光照计算，仅仅计算哪些片元可见，将可见的片元信息存储到G缓冲区。第二个Pass使用G缓冲中的信息进行真正的光照计算。
缺点：
不支持真正的抗锯齿功能；不能处理半透明物体；对显卡有要求，







另：pbs就是pbr
