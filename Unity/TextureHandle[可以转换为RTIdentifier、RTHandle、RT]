TextureHandle 是 Unity 中用于引用 Render Texture 的一种结构体。
TextureHandle 还可以被用于在 GPU 和 CPU 之间传输数据，以及在不同的渲染 Pass 之间共享数据等操作。TextureHandle 的灵活性和高效性是 Unity 中进行纹理读写操作的重要工具之一。

TextureHandle 可以通过以下方式初始化：
```
TextureHandle handle = builder.AcquireTexture(params);
```

其中，builder 是一个 RenderPassBuilder 对象，用于构建渲染 Pass。params 是一个 TextureDesc [RenderTextureDescriptor]类型的参数，用于描述要创建的 Render Texture 的宽度、高度、格式等信息。
AcquireTexture 方法会返回一个 TextureHandle 对象，它代表了一个 Render Texture，可以用于后续的渲染操作。











RenderTextureDescriptor是一个结构体，用于描述一个渲染纹理的属性（大小、格式、深度缓冲等）

https://docs.unity3d.com/Packages/com.unity.render-pipelines.core@10.2/api/UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.html?q=TextureHandle#UnityEngine_Experimental_Rendering_RenderGraphModule_TextureHandle_op_Implicit_UnityEngine_Experimental_Rendering_RenderGraphModule_TextureHandle__UnityEngine_Rendering_RTHandle



TextureHandle与RenderTargetIdentifier[srp pass中可以获取的到的值]、RTHandle、RenderTexture
RenderTargetIdentifier转换为TextureHandle：
cmd.Blit(src, srcTH)//src是RenderTargetIdentifier，srcTH是TextureHandle







ChatGpt说的：
RenderTarget、RenderTexture、TextureHandle、RenderTargetIdentifier和RTHandle都是Unity中用于表示渲染目标和纹理的不同类型，它们有一些区别和用途。

- RenderTarget：表示渲染目标，是一个抽象类。RenderTarget可以是一个屏幕（Screen）、一个相机（Camera）、一个纹理（Texture）或者是一个深度缓冲区（DepthBuffer）等。在使用它时，可以使用Graphics.SetRenderTarget方法将其设置为当前的渲染目标。
- RenderTexture：表示渲染目标或纹理，是一个具体的类。RenderTexture可以被用作渲染目标或者纹理，可以设置它的尺寸、格式、深度、抗锯齿等属性。可以使用Graphics.SetRenderTarget或者在Shader中定义的属性来将其设置为当前的渲染目标或纹理。RenderTexture也可以用作相机的渲染目标。
- TextureHandle：表示纹理，是一个结构体，用于在Shader中表示纹理。TextureHandle只是一个引用，它并没有实际的纹理数据。可以使用RenderTargetUtility.GetTextureHandle方法(根本没有这个方法)将RenderTarget或RenderTexture转换为TextureHandle。
- RenderTargetIdentifier：表示渲染目标，是一个结构体，用于在Graphics.SetRenderTarget方法中指定渲染目标。RenderTargetIdentifier可以是一个RenderTarget、RenderTexture、Screen或者是一个深度缓冲区。
- RTHandle：表示渲染目标或纹理，是一个具体的类。RTHandle是一个高级API，提供了更多的功能和控制，例如自动调整尺寸、自动释放等等。RTHandle可以被用作渲染目标或纹理，可以设置它的尺寸、格式、深度、抗锯齿等属性。可以使用RTHandle.Alloc或者在Shader中定义的属性来将其设置为当前的渲染目标或纹理。

在使用这些类型时，需要根据需要选择合适的类型。如果只是简单地使用渲染目标或纹理，可以使用RenderTarget或RenderTexture。如果需要在Shader中表示纹理，可以使用TextureHandle。如果需要在Graphics.SetRenderTarget方法中指定渲染目标，可以使用RenderTargetIdentifier。如果需要更高级的功能和控制，可以使用RTHandle。



























实际使用中,打断点一直是Texture(0):结果就是正常的！
当您将 TextureHandle 传递给 CommandBuffer 中的渲染命令时，它将被解析为实际的 GPU 纹理资源。因此，在 Unity 编辑器中查看 TextureHandle 的值时，它将显示为 Texture(0)，这只是一个占位符，表示 TextureHandle 句柄
将在实际渲染时被解析为实际的 GPU 纹理资源。
所以，不用担心 TextureHandle 显示为 Texture(0)，它是正常的，只要在正确的上下文中使用它，它就会正确地表示您所需的 GPU 纹理资源。








