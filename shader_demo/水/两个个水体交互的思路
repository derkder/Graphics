https://zhuanlan.zhihu.com/p/465551866
和下面的思路差不多，但是更清晰点儿




https://zhuanlan.zhihu.com/p/447311831
粒子系统【粒子加在玩家身上，玩家就可以和水体交互了】不断发射带有波纹法线贴图的面片，然后把这些法线渲染一张RenderTexture传输到Water Shader中，然后和Water Normal 叠加即可形成水波效果。
也就是通信靠只能观察到带有粒子的玩家的camera用绑在自己身上和水身上的rendertexture告诉水
1、在场景创建一个Camera，该Camera只渲染特定的Layer，即水波法线（waterwave）【Culling Mask 设置为WaterWave】，创建一个RenderTexture，拖拽到这个相机的Target Texture上
2.创建一个Shader，命名为WaterRing，该Shader用于渲染水波法线。
3.继续创建一个粒子系统，材质Shader设置为刚才创建的WaterRing Shader，并且该粒子的Layer需要修改为WaterWave。








另一种思路(貌似上面的更好)：
https://www.patreon.com/posts/grass-geometry-1-40090373
交互性是通过获取玩家位置并使用 _Radius 属性计算其周围的球体来完成的，使用它来置换草叶。
.cs：
using UnityEngine;
public class ShaderInteractor : MonoBehaviour{
    void Update(){
        Shader.SetGlobalVector("_PositionMoving", transform.position);
    }
}
.shader
uniform float3 _PositionMoving;
//uniform:可以随意在任意shader(vertex shader, geometry shader, or fragment shader)访问，不同的shader中uniform是一起链接的，初始化之后，不能修改其值，否则会引起编译错误。




