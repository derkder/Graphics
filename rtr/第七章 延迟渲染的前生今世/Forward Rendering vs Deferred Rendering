传统的正向渲染思路是，先进行着色，再进行深度测试。其的主要缺点就是光照计算跟场景复杂度和光源个数有很大关系。假设有 n 个物体，m 个光源，且每个每个物体受所有光源的
影响，那么复杂度就是 O(m*n)。

延迟渲染基本思想
是，先执行深度测试，再进行着色计算，将本来在物空 间（三维空间）进行光照计算放到了
像空间（二维空间）进行处理。为 O(n+m)。

延迟渲染的优点：
• 复杂度仅 O(n+m)。
• 只渲染可见的像素，节省计算量。
• 用更少的 shader。
• 对后处理支持良好。
• 在大量光源的场景优势尤其明显
延迟渲染的缺点：
• 内存开销较大。
• 读写 G-buffer 的内存带宽用量是性能瓶颈。
• 对透明物体的渲染存在问题。在这点上需要结合正向渲染进行渲染。
• 对多重采样抗锯齿（MultiSampling Anti-Aliasing, MSAA）的支持不友好，主要因为需开启 MRT。
