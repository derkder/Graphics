在计算机图形学中，纹理贴图是使用图像、函数或其他数据源来改变物体表面外观的技术。例如，可以将一幅砖墙的彩色图像应用到一个多边形上，而不用对砖墙的几何形状进行精确表示。
当观察这个多边形的时候，这张彩色图像就出现在多边形所在位置上。只要观察者不接近这面墙，就不会注意到其中几何细节的不足（比如其实砖块和砂浆的图像是显示在光滑的表面上的事实）。
通过这种方式将图像和物体表面结合起来，可以在建模、存储空间和速度方面节省很多资源。



https://blog.csdn.net/qq826364410/article/details/88569131
mipmaps
法线贴图
天空盒：六个方形纹理表示对环境的反射集合。六个方形形成围绕物体的假想立方体的面。通常用于捕捉物体的反射和周围环境。







解决纹理太小和纹理太大的问题：
https://zhuanlan.zhihu.com/p/144332091
纹理过小：
  把一张100x100的纹理贴图应用在一500x500的屏幕之上必然会导致走样失真，因为屏幕空间的几个像素点对应在纹理贴图的坐标上都是集中在一个像素大小之内。那么如果仅仅是使用对应(u,v)坐标在texture贴图下最近的那个像素点，往往会造成严重的走样。
解决：
  双线性插值：
    找到（s，t），s、t都在0-1之间进行线性插值
    先进行上下两点的水平插值，u0 =（u00+u10）s、u1 =（u01+u11）s
    再进行竖直的插值（u0+u1）t
    得到红点对应的值，例如rgb值



纹理过大：
  纹理贴图大小500x500，屏幕空间100x100；导致近处锯齿，远处摩尔纹。即屏幕空间的一个像素对应了纹理贴图上的一片范围的点
解决：
  mipmap：【一个采样点的颜色信息不足以代表 “footprint”里一个区域的颜色信息，如果可以求出这样一个区域里面所有颜色的均值，是不是就是一种可行的方法呢？】
    远处圆圈里的footprint必然比近处的要大，因此必须要准备不同level的区域查询才可以，而这正是Mipmap。
    （Mipmap操作：
    在屏幕空间中取当前像素相邻的像素带你并查询其对应的uv坐标。
    计算出当前像素点与其他像素点距离其他像素点的最大值L。
    根据最大值L通过上面公式计算得到该点所处的层数D。
    通过mipmap操作得到哪些区域的像素要使用第几层进行平均操作。）
    其中摩尔纹产生的原因;
    是光栅化的算法导致的。我们知道，一个三角形有顶点坐标和纹理坐标，纹理坐标范围是【0-1】。光栅化的过程就是把三角形在屏幕上以一个个像素显示出来，
    插值计算三角形内部每个像素的顶点的数据，包括常见的深度与纹理坐标。如果这个三角形距离camera,也就是说在屏幕上占了较多的像素，那么相邻两个像素的纹理坐标是接近的，
    这样通过纹理坐标获得纹理贴图上的纹素值也是接近的，这样这俩个像素看起来就是较顺接流畅，视觉上不突兀，同时gpu读取也快速，因为大部分纹素读取是在cache中。
    而如果这个三角形距离camera较远，也就是在屏幕上只占了很少的像素，这种情况就是一个小物体应用了一个大纹理，光栅化后，相邻两个像素的纹理坐标会差别好大，
    读出来的纹素也会差别很大，会很突兀，尤其是camera移动时特别难看，产生闪烁，火花现像，除此之外，gpu读取性能也很低效，因为两个相邻的像素所对应的纹素，
    一个可能在cache中，另一个还没有加载到cache中呢。而解决这种视觉和性能问题，mipmap就登场了
