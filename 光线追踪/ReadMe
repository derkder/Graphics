光线追踪把一个场景的渲染任务拆分成了从摄像机出发的若干条光线对场景的影响，这些光线彼此不知道对方，但却知道整个场景的信息。每条光线会和场景并行地求交，
根据交点位置获取表面的材质、纹理等信息，并结合光源信息计算光照。

光线追踪方法主要思想是：
从视点向成像平面上的像素发射光线，
找到与该光线相交的最近物体的交点，如果该点处的表面是散射面，则计算光源直接照射该点产生的颜色；

如果该点处表面是镜面或者折射面，则继续向反射或折射方向跟踪另一条光线，如此递归下去，知直到光线逃逸出场景或达到设定的最大递归深度



路径追踪终极框架
radiance = 0
thp = 1
for(i : bounce):
  shoot ray => hitInfo
  sample(hitInfo)[IS] => out_dir & probability
  brdf(hitInfo.mat, out_dir, in_dir)[DFG] -> brdf
  thp *= brdf
  thp /= probability
  radiace += hitIndo.mat.emmision * thp
color = radiance
return color
  
